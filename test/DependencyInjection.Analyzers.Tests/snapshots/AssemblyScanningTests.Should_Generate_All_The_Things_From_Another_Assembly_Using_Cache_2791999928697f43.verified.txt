{
  FinalDiagnostics: [],
  GeneratedCache: {
    Rocket.Surgery.DependencyInjection.Extensions: {
      InternalServiceDescriptorRequests: [
        {
          Assembly: {
            Location: {
              Kind: ServiceDescriptor,
              LineNumber: 21,
              ExpressionHash: 8JsIfWGtyxwbpwWfPrtcbQ==,
              FileName: CompiledTypeProviderServiceCollectionExtensions.cs,
              FilePath: {SolutionDirectory}src/DependencyInjection.Extensions/CompiledTypeProviderServiceCollectionExtensions.cs
            },
            Assembly: {
              AllAssembly: true,
              IncludeSystem: false,
              Assembly: null,
              NotAssembly: null,
              AssemblyDependencies: null
            }
          },
          Reflection: {
            Type: {
              Filter: All,
              NamespaceFilters: null,
              NameFilters: null,
              TypeKindFilters: [
                {
                  Include: true,
                  TypeKinds: [
                    Class
                  ]
                }
              ],
              TypeInfoFilters: [
                {
                  Include: false,
                  TypeInfos: [
                    Static,
                    Abstract
                  ]
                }
              ],
              WithAttributeFilters: null,
              WithAttributeStringFilters: null,
              WithAnyAttributeFilters: [
                {
                  Include: true,
                  Assembly: Rocket.Surgery.DependencyInjection.Extensions,
                  Attribute: Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute,
                  UnboundGenericType: false
                },
                {
                  Include: true,
                  Assembly: Rocket.Surgery.DependencyInjection.Extensions,
                  Attribute: Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute`2,
                  UnboundGenericType: true
                },
                {
                  Include: true,
                  Assembly: Rocket.Surgery.DependencyInjection.Extensions,
                  Attribute: Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute`3,
                  UnboundGenericType: true
                },
                {
                  Include: true,
                  Assembly: Rocket.Surgery.DependencyInjection.Extensions,
                  Attribute: Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute`4,
                  UnboundGenericType: true
                }
              ],
              WithAnyAttributeStringFilters: null,
              AssignableToTypeFilters: null,
              AssignableToAnyTypeFilters: null
            }
          },
          ServiceDescriptor: {
            ServiceDescriptor: {
              ServiceTypeDescriptors: [
                {
                  Identifier: "s"
                }
              ]
            }
          },
          Type: GetServiceDescriptorCollectionData
        }
      ],
      IsEmpty: false
    }
  },
  GeneratorDiagnostics: {
    Rocket.Surgery.DependencyInjection.Analyzers.CompiledServiceScanningGenerator: []
  },
  GlobalOptions: {
    build_property.IntermediateOutputPath: obj/net9.0,
    build_property.ProjectDir: {TempPath}/test
  },
  PartialsCached: {
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-1aa4af1ccef4e9c04ef95a16b1aa3e58: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 132,
        ExpressionHash: 7vjZcTtcu7BiBUxN2YjR2A==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("FxResources.Microsoft.Extensions.DependencyInjection.Abstractions.SR")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ActivatorUtilitiesUpdateHandler")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorInfoEx")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorMatcher")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+FactoryParameterContext")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.KeyedService+AnyKeyObj")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ServiceCollection+ServiceCollectionDebugView")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.Internal.ParameterDefaultValue")!);
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-1e8b433e612520320429fa0aadfc8bb6: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 62,
        ExpressionHash: smHMPY82+06HwG0itiaMJw==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructorAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.AsyncServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.FromKeyedServicesAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceCollection));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ISupportRequiredService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.KeyedService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollection));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceKeyAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceLifetime));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderKeyedServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions));
},
      PrivateAssemblies: null
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-223391090b644184a0ec24a82bee4add: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 82,
        ExpressionHash: D2aB+ba3m7tjD2l6ZnawMg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorInfoEx")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorMatcher")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+FactoryParameterContext")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.AsyncServiceScope));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.KeyedService+AnyKeyObj")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory<>));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ServiceCollection+ServiceCollectionDebugView")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceLifetime));
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-289fce7ec5d618fff46d47bc4a9d3f61: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 92,
        ExpressionHash: ygNhwczilKlqHMF7Vh1YHw==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("FxResources.Microsoft.Extensions.DependencyInjection.Abstractions.SR")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ActivatorUtilitiesUpdateHandler")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.KeyedService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderKeyedServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.Internal.ParameterDefaultValue")!);
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-35b570518079b8e38d77025340220a4a: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 211,
        ExpressionHash: KZ+tr2CZq8vKDpEywymRZA==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("FxResources.Microsoft.Extensions.DependencyInjection.Abstractions.SR")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ActivatorUtilitiesUpdateHandler")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorInfoEx")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorMatcher")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+FactoryParameterContext")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.AsyncServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceCollection));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ISupportRequiredService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.KeyedService));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.KeyedService+AnyKeyObj")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollection));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ServiceCollection+ServiceCollectionDebugView")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceLifetime));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderKeyedServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.Internal.ParameterDefaultValue")!);
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-41643e3d3813410a5954037f37a0a48d: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 112,
        ExpressionHash: 1ecL2VuAmqERavxp/hDPEw==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory<>));
},
      PrivateAssemblies: null
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-4e26f838befb4e21120a9a3095b5f21e: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 32,
        ExpressionHash: AmhqenvYM2XrvuwUeKjp3w==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorMatcher")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+FactoryParameterContext")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.AsyncServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceCollection));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ISupportRequiredService));
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-53590a8172b1be2af215506d83612089: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 169,
        ExpressionHash: lMxYIBBphBNiTsf1qLYxDg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("FxResources.Microsoft.Extensions.DependencyInjection.Abstractions.SR")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ActivatorUtilitiesUpdateHandler")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorInfoEx")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorMatcher")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+FactoryParameterContext")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.AsyncServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceCollection));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ISupportRequiredService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.KeyedService));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.KeyedService+AnyKeyObj")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollection));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ServiceCollection+ServiceCollectionDebugView")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceLifetime));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderKeyedServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.Internal.ParameterDefaultValue")!);
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-6a97c89817ca24998026dab9b4cb1658: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 147,
        ExpressionHash: 9gMgkeelPSZE7F/SB5sG3Q==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("FxResources.Microsoft.Extensions.DependencyInjection.Abstractions.SR")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ActivatorUtilitiesUpdateHandler")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorInfoEx")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceCollection));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ISupportRequiredService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.KeyedService));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.KeyedService+AnyKeyObj")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollection));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ServiceCollection+ServiceCollectionDebugView")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderKeyedServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.Internal.ParameterDefaultValue")!);
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-6c46b10d8b6a185c6b68d1a8a922bf3f: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 52,
        ExpressionHash: k2UXW1Y4n0CiziE30f9ykg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceCollection));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ISupportRequiredService));
},
      PrivateAssemblies: null
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-7b0ba03abfd2b5ba69268de2587e3389: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 232,
        ExpressionHash: mOaZ3T23RKRVhescjSqGpw==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ActivatorUtilitiesUpdateHandler")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorInfoEx")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorMatcher")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+FactoryParameterContext")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructorAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.AsyncServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.FromKeyedServicesAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceCollection));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ISupportRequiredService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.KeyedService));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.KeyedService+AnyKeyObj")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollection));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ServiceCollection+ServiceCollectionDebugView")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceKeyAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceLifetime));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderKeyedServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions));
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-8ee4616662ea234b426e4cab35f1e16b: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 22,
        ExpressionHash: iBsjVHnEAl/ss+AU7zbZQw==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorMatcher")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+FactoryParameterContext")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.AsyncServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceCollection));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ISupportRequiredService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceLifetime));
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-9babe002f68b51b0478d9d241ca5b4d1: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 122,
        ExpressionHash: Dejw5/f3yFikQXVKD2M3pg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("FxResources.Microsoft.Extensions.DependencyInjection.Abstractions.SR")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ActivatorUtilitiesUpdateHandler")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorInfoEx")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorMatcher")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+FactoryParameterContext")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructorAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.AsyncServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.FromKeyedServicesAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.KeyedService));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.KeyedService+AnyKeyObj")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollection));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ServiceCollection+ServiceCollectionDebugView")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceKeyAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceLifetime));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderKeyedServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.Internal.ParameterDefaultValue")!);
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-9e7eae142a6a1e07d72399900de2aa36: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 200,
        ExpressionHash: le6aEBErwTZLSReiQZByDg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("FxResources.Microsoft.Extensions.DependencyInjection.Abstractions.SR")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ActivatorUtilitiesUpdateHandler")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorInfoEx")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorMatcher")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+FactoryParameterContext")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.AsyncServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceCollection));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ISupportRequiredService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.KeyedService));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.KeyedService+AnyKeyObj")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollection));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ServiceCollection+ServiceCollectionDebugView")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceLifetime));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderKeyedServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.Internal.ParameterDefaultValue")!);
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-b3a38c7517056d4414b602b44a434443: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 158,
        ExpressionHash: ed8FYHtD7zTK9QRozv8iOA==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("FxResources.Microsoft.Extensions.DependencyInjection.Abstractions.SR")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ActivatorUtilitiesUpdateHandler")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceCollection));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ISupportRequiredService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.KeyedService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollection));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderKeyedServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.Internal.ParameterDefaultValue")!);
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-c51b989da665b432b894f2884646bd8e: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 242,
        ExpressionHash: 4knsgcWNnVMzYv5vk8vSXg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ActivatorUtilitiesUpdateHandler")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorInfoEx")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorMatcher")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+FactoryParameterContext")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructorAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.AsyncServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.FromKeyedServicesAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceCollection));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ISupportRequiredService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.KeyedService));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.KeyedService+AnyKeyObj")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollection));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ServiceCollection+ServiceCollectionDebugView")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceKeyAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceLifetime));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderKeyedServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions));
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-d21fc541244dec0439c9ceb8809d1894: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 72,
        ExpressionHash: WAZd2dprWkbDpjZXt4A58w==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorMatcher")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+FactoryParameterContext")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.AsyncServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceLifetime));
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-dc12e37ed51373cf667b116b78b461be: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 42,
        ExpressionHash: CzvvM9SvABHOhmj5c5Ll9w==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("FxResources.Microsoft.Extensions.DependencyInjection.Abstractions.SR")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ActivatorUtilitiesUpdateHandler")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorInfoEx")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorMatcher")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+FactoryParameterContext")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructorAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.AsyncServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.FromKeyedServicesAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.KeyedService));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.KeyedService+AnyKeyObj")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollection));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ServiceCollection+ServiceCollectionDebugView")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceKeyAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceLifetime));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderKeyedServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.Internal.ParameterDefaultValue")!);
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-ed64a623d13211af4208bba3c7d5012a: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 102,
        ExpressionHash: k3I/Rx+SkLucSpWhzM/FnQ==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorInfoEx")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorMatcher")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+FactoryParameterContext")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructorAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.AsyncServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.FromKeyedServicesAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceCollection));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ISupportRequiredService));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.KeyedService+AnyKeyObj")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollection));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ServiceCollection+ServiceCollectionDebugView")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceKeyAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceLifetime));
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-f478680e296330bb9260417853531efc: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 222,
        ExpressionHash: JJRyJc+KcLl0CptK5sW/Hg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ActivatorUtilitiesUpdateHandler")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorInfoEx")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorMatcher")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+FactoryParameterContext")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructorAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.AsyncServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.FromKeyedServicesAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceCollection));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ISupportRequiredService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.KeyedService));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.KeyedService+AnyKeyObj")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollection));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ServiceCollection+ServiceCollectionDebugView")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceKeyAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceLifetime));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderKeyedServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions));
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-fc8463fde2def5c108d5d56904c5697a: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 252,
        ExpressionHash: mjy8n2sGZ/Gz2PKG2wj77Q==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructorAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.AsyncServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.FromKeyedServicesAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceCollection));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ISupportRequiredService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.KeyedService));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollection));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceKeyAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceLifetime));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderKeyedServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions));
},
      PrivateAssemblies: null
    },
    Reflection-OtherProject-1aa4af1ccef4e9c04ef95a16b1aa3e58: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 132,
        ExpressionHash: 7vjZcTtcu7BiBUxN2YjR2A==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(OtherProject.GetType("Program")!);
},
      PrivateAssemblies: [
        OtherProject
      ]
    },
    Reflection-OtherProject-35b570518079b8e38d77025340220a4a: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 211,
        ExpressionHash: KZ+tr2CZq8vKDpEywymRZA==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(OtherProject.GetType("Program")!);
},
      PrivateAssemblies: [
        OtherProject
      ]
    },
    Reflection-OtherProject-53590a8172b1be2af215506d83612089: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 169,
        ExpressionHash: lMxYIBBphBNiTsf1qLYxDg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(OtherProject.GetType("Program")!);
},
      PrivateAssemblies: [
        OtherProject
      ]
    },
    Reflection-OtherProject-6a97c89817ca24998026dab9b4cb1658: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 147,
        ExpressionHash: 9gMgkeelPSZE7F/SB5sG3Q==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(OtherProject.GetType("Program")!);
},
      PrivateAssemblies: [
        OtherProject
      ]
    },
    Reflection-OtherProject-9babe002f68b51b0478d9d241ca5b4d1: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 122,
        ExpressionHash: Dejw5/f3yFikQXVKD2M3pg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(OtherProject.GetType("Program")!);
},
      PrivateAssemblies: [
        OtherProject
      ]
    },
    Reflection-OtherProject-9e7eae142a6a1e07d72399900de2aa36: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 200,
        ExpressionHash: le6aEBErwTZLSReiQZByDg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(OtherProject.GetType("Program")!);
},
      PrivateAssemblies: [
        OtherProject
      ]
    },
    Reflection-OtherProject-b3a38c7517056d4414b602b44a434443: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 158,
        ExpressionHash: ed8FYHtD7zTK9QRozv8iOA==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(OtherProject.GetType("Program")!);
},
      PrivateAssemblies: [
        OtherProject
      ]
    },
    Reflection-OtherProject-dc12e37ed51373cf667b116b78b461be: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 42,
        ExpressionHash: CzvvM9SvABHOhmj5c5Ll9w==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(OtherProject.GetType("Program")!);
},
      PrivateAssemblies: [
        OtherProject
      ]
    },
    Reflection-OtherProject-ed64a623d13211af4208bba3c7d5012a: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 102,
        ExpressionHash: k3I/Rx+SkLucSpWhzM/FnQ==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(OtherProject.GetType("Program")!);
},
      PrivateAssemblies: [
        OtherProject
      ]
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-1aa4af1ccef4e9c04ef95a16b1aa3e58: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 132,
        ExpressionHash: 7vjZcTtcu7BiBUxN2YjR2A==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
},
      PrivateAssemblies: [
        Rocket.Surgery.DependencyInjection.Extensions
      ]
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-1e8b433e612520320429fa0aadfc8bb6: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 62,
        ExpressionHash: smHMPY82+06HwG0itiaMJw==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.RegistrationLifetimeAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<, >));
},
      PrivateAssemblies: null
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-223391090b644184a0ec24a82bee4add: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 82,
        ExpressionHash: D2aB+ba3m7tjD2l6ZnawMg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<, >));
},
      PrivateAssemblies: null
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-289fce7ec5d618fff46d47bc4a9d3f61: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 92,
        ExpressionHash: ygNhwczilKlqHMF7Vh1YHw==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
},
      PrivateAssemblies: null
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-35b570518079b8e38d77025340220a4a: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 211,
        ExpressionHash: KZ+tr2CZq8vKDpEywymRZA==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
},
      PrivateAssemblies: [
        Rocket.Surgery.DependencyInjection.Extensions
      ]
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-41643e3d3813410a5954037f37a0a48d: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 112,
        ExpressionHash: 1ecL2VuAmqERavxp/hDPEw==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<, >));
},
      PrivateAssemblies: [
        Rocket.Surgery.DependencyInjection.Extensions
      ]
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-4e26f838befb4e21120a9a3095b5f21e: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 32,
        ExpressionHash: AmhqenvYM2XrvuwUeKjp3w==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
},
      PrivateAssemblies: null
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-53590a8172b1be2af215506d83612089: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 169,
        ExpressionHash: lMxYIBBphBNiTsf1qLYxDg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
},
      PrivateAssemblies: null
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-6a97c89817ca24998026dab9b4cb1658: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 147,
        ExpressionHash: 9gMgkeelPSZE7F/SB5sG3Q==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
},
      PrivateAssemblies: [
        Rocket.Surgery.DependencyInjection.Extensions
      ]
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-6c46b10d8b6a185c6b68d1a8a922bf3f: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 52,
        ExpressionHash: k2UXW1Y4n0CiziE30f9ykg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
},
      PrivateAssemblies: null
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-7b0ba03abfd2b5ba69268de2587e3389: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 232,
        ExpressionHash: mOaZ3T23RKRVhescjSqGpw==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
},
      PrivateAssemblies: null
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-8ee4616662ea234b426e4cab35f1e16b: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 22,
        ExpressionHash: iBsjVHnEAl/ss+AU7zbZQw==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
},
      PrivateAssemblies: null
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-9babe002f68b51b0478d9d241ca5b4d1: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 122,
        ExpressionHash: Dejw5/f3yFikQXVKD2M3pg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.RegistrationLifetimeAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<, >));
},
      PrivateAssemblies: [
        Rocket.Surgery.DependencyInjection.Extensions
      ]
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-9e7eae142a6a1e07d72399900de2aa36: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 200,
        ExpressionHash: le6aEBErwTZLSReiQZByDg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
},
      PrivateAssemblies: [
        Rocket.Surgery.DependencyInjection.Extensions
      ]
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-b3a38c7517056d4414b602b44a434443: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 158,
        ExpressionHash: ed8FYHtD7zTK9QRozv8iOA==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
},
      PrivateAssemblies: [
        Rocket.Surgery.DependencyInjection.Extensions
      ]
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-c51b989da665b432b894f2884646bd8e: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 242,
        ExpressionHash: 4knsgcWNnVMzYv5vk8vSXg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
},
      PrivateAssemblies: null
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-d21fc541244dec0439c9ceb8809d1894: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 72,
        ExpressionHash: WAZd2dprWkbDpjZXt4A58w==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
},
      PrivateAssemblies: null
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-dc12e37ed51373cf667b116b78b461be: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 42,
        ExpressionHash: CzvvM9SvABHOhmj5c5Ll9w==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.RegistrationLifetimeAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<, >));
},
      PrivateAssemblies: [
        Rocket.Surgery.DependencyInjection.Extensions
      ]
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-ed64a623d13211af4208bba3c7d5012a: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 102,
        ExpressionHash: k3I/Rx+SkLucSpWhzM/FnQ==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.RegistrationLifetimeAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<, >));
},
      PrivateAssemblies: [
        Rocket.Surgery.DependencyInjection.Extensions
      ]
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-f478680e296330bb9260417853531efc: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 222,
        ExpressionHash: JJRyJc+KcLl0CptK5sW/Hg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
},
      PrivateAssemblies: null
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-fc8463fde2def5c108d5d56904c5697a: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 252,
        ExpressionHash: mjy8n2sGZ/Gz2PKG2wj77Q==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.RegistrationLifetimeAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<, >));
},
      PrivateAssemblies: null
    },
    Reflection-TestAssembly-1aa4af1ccef4e9c04ef95a16b1aa3e58: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 132,
        ExpressionHash: 7vjZcTtcu7BiBUxN2YjR2A==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    Reflection-TestAssembly-1e8b433e612520320429fa0aadfc8bb6: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 62,
        ExpressionHash: smHMPY82+06HwG0itiaMJw==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(typeof(global::TestAssembly.Service));
},
      PrivateAssemblies: null
    },
    Reflection-TestAssembly-289fce7ec5d618fff46d47bc4a9d3f61: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 92,
        ExpressionHash: ygNhwczilKlqHMF7Vh1YHw==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::TestAssembly.Nested));
},
      PrivateAssemblies: null
    },
    Reflection-TestAssembly-35b570518079b8e38d77025340220a4a: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 211,
        ExpressionHash: KZ+tr2CZq8vKDpEywymRZA==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(typeof(global::TestAssembly.Service));
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    Reflection-TestAssembly-41643e3d3813410a5954037f37a0a48d: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 112,
        ExpressionHash: 1ecL2VuAmqERavxp/hDPEw==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IValidator<>));
},
      PrivateAssemblies: null
    },
    Reflection-TestAssembly-4e26f838befb4e21120a9a3095b5f21e: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 32,
        ExpressionHash: AmhqenvYM2XrvuwUeKjp3w==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
},
      PrivateAssemblies: null
    },
    Reflection-TestAssembly-53590a8172b1be2af215506d83612089: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 169,
        ExpressionHash: lMxYIBBphBNiTsf1qLYxDg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(typeof(global::TestAssembly.Service));
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    Reflection-TestAssembly-6a97c89817ca24998026dab9b4cb1658: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 147,
        ExpressionHash: 9gMgkeelPSZE7F/SB5sG3Q==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(typeof(global::TestAssembly.Service));
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    Reflection-TestAssembly-6c46b10d8b6a185c6b68d1a8a922bf3f: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 52,
        ExpressionHash: k2UXW1Y4n0CiziE30f9ykg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
},
      PrivateAssemblies: null
    },
    Reflection-TestAssembly-8ee4616662ea234b426e4cab35f1e16b: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 22,
        ExpressionHash: iBsjVHnEAl/ss+AU7zbZQw==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
},
      PrivateAssemblies: null
    },
    Reflection-TestAssembly-9babe002f68b51b0478d9d241ca5b4d1: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 122,
        ExpressionHash: Dejw5/f3yFikQXVKD2M3pg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(typeof(global::TestAssembly.Service));
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    Reflection-TestAssembly-9e7eae142a6a1e07d72399900de2aa36: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 200,
        ExpressionHash: le6aEBErwTZLSReiQZByDg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(typeof(global::TestAssembly.Service));
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    Reflection-TestAssembly-b3a38c7517056d4414b602b44a434443: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 158,
        ExpressionHash: ed8FYHtD7zTK9QRozv8iOA==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(typeof(global::TestAssembly.Service));
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    Reflection-TestAssembly-dc12e37ed51373cf667b116b78b461be: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 42,
        ExpressionHash: CzvvM9SvABHOhmj5c5Ll9w==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(typeof(global::TestAssembly.Service));
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    Reflection-TestAssembly-ed64a623d13211af4208bba3c7d5012a: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 102,
        ExpressionHash: k3I/Rx+SkLucSpWhzM/FnQ==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(typeof(global::TestAssembly.Service));
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    Reflection-TestAssembly-fc8463fde2def5c108d5d56904c5697a: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 252,
        ExpressionHash: mjy8n2sGZ/Gz2PKG2wj77Q==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(typeof(global::TestAssembly.Service));
},
      PrivateAssemblies: null
    },
    ServiceDescriptor-TestAssembly-071848cbe2a6c0d0d7e2c6d6ee7156db: {
      Kind: ServiceDescriptor,
      Location: {
        Kind: ServiceDescriptor,
        LineNumber: 325,
        ExpressionHash: 3ndm9Cm5APZA6UEXJECnFg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.ServiceA, global::TestAssembly.Nested.ServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Service, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IServiceB>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.ServiceB")!, TestAssembly.GetType("TestAssembly.ServiceB")!));
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    ServiceDescriptor-TestAssembly-1b4c28d3dc45149a86215c2da7a52b5d: {
      Kind: ServiceDescriptor,
      Location: {
        Kind: ServiceDescriptor,
        LineNumber: 313,
        ExpressionHash: 2bDwSkiqEgY2yMfzByQ/Dw==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Service, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IServiceB>(a => a.GetRequiredService<global::TestAssembly.Service>()));
},
      PrivateAssemblies: null
    },
    ServiceDescriptor-TestAssembly-1e30a13683668eb4da02fe81be083c9d: {
      Kind: ServiceDescriptor,
      Location: {
        Kind: ServiceDescriptor,
        LineNumber: 279,
        ExpressionHash: 3OfsQex7NYRaroSlneP6BQ==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.Nested.ServiceA, global::TestAssembly.Nested.ServiceA>());
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Nested.ServiceA>()));
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.Service, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.IServiceB>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Singleton(TestAssembly.GetType("TestAssembly.ServiceB")!, TestAssembly.GetType("TestAssembly.ServiceB")!));
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.IService>(a => (global::TestAssembly.IService)a.GetRequiredService(TestAssembly.GetType("TestAssembly.ServiceB")!)));
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    ServiceDescriptor-TestAssembly-277b4255db4e7d064dcee8f4bb9491b2: {
      Kind: ServiceDescriptor,
      Location: {
        Kind: ServiceDescriptor,
        LineNumber: 285,
        ExpressionHash: omcyEv9CPv2iVxD3d0bsmQ==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.ServiceA, global::TestAssembly.Nested.ServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Nested.ServiceA>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Service, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IServiceB>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.ServiceB")!, TestAssembly.GetType("TestAssembly.ServiceB")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => (global::TestAssembly.IService)a.GetRequiredService(TestAssembly.GetType("TestAssembly.ServiceB")!)));
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    ServiceDescriptor-TestAssembly-39488201dbf71db9402ac2d595f92282: {
      Kind: ServiceDescriptor,
      Location: {
        Kind: ServiceDescriptor,
        LineNumber: 274,
        ExpressionHash: nq9T1iBLdNPpqzJrTdNMCQ==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService, global::TestAssembly.Nested.ServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Scoped(typeof(global::TestAssembly.IService), TestAssembly.GetType("TestAssembly.ServiceB")!));
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    ServiceDescriptor-TestAssembly-46bd9eae475370117c013a5ace249efd: {
      Kind: ServiceDescriptor,
      Location: {
        Kind: ServiceDescriptor,
        LineNumber: 291,
        ExpressionHash: nxouMzl1QFVEUuYYtb+FlA==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.GenericService")!, TestAssembly.GetType("TestAssembly.GenericService")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Int32>>(a => (global::TestAssembly.IGenericService<global::System.Int32>)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>>(a => (global::TestAssembly.IGenericService<global::System.String>)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IOther>(a => (global::TestAssembly.IOther)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.GenericServiceB, global::TestAssembly.GenericServiceB>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Decimal>>(a => a.GetRequiredService<global::TestAssembly.GenericServiceB>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IOther>(a => a.GetRequiredService<global::TestAssembly.GenericServiceB>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.GenericServiceA, global::TestAssembly.Nested.GenericServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>>(a => a.GetRequiredService<global::TestAssembly.Nested.GenericServiceA>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IOther>(a => a.GetRequiredService<global::TestAssembly.Nested.GenericServiceA>()));
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    ServiceDescriptor-TestAssembly-4e61ff2bea1afbfb7134af38e2f97b6c: {
      Kind: ServiceDescriptor,
      Location: {
        Kind: ServiceDescriptor,
        LineNumber: 372,
        ExpressionHash: +ZwL1kukDVL/SHup/rQyqQ==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.GenericService")!, TestAssembly.GetType("TestAssembly.GenericService")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Int32>>(a => (global::TestAssembly.IGenericService<global::System.Int32>)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>>(a => (global::TestAssembly.IGenericService<global::System.String>)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IOther>(a => (global::TestAssembly.IOther)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.GenericServiceB, global::TestAssembly.GenericServiceB>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Decimal>>(a => a.GetRequiredService<global::TestAssembly.GenericServiceB>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IOther>(a => a.GetRequiredService<global::TestAssembly.GenericServiceB>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.GenericServiceA, global::TestAssembly.Nested.GenericServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>>(a => a.GetRequiredService<global::TestAssembly.Nested.GenericServiceA>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IOther>(a => a.GetRequiredService<global::TestAssembly.Nested.GenericServiceA>()));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!, TestAssembly.GetType("TestAssembly.Nested+MyRecord")!));
    services.Add(ServiceDescriptor.Scoped(typeof(global::System.IEquatable<>).MakeGenericType(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!)!, a => a.GetRequiredService(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.ServiceA, global::TestAssembly.Nested.ServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Nested.ServiceA>()));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.Nested+Validator")!, TestAssembly.GetType("TestAssembly.Nested+Validator")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IValidator>(a => (global::TestAssembly.IValidator)a.GetRequiredService(TestAssembly.GetType("TestAssembly.Nested+Validator")!)));
    services.Add(ServiceDescriptor.Scoped(typeof(global::TestAssembly.IValidator<>).MakeGenericType(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!)!, a => a.GetRequiredService(TestAssembly.GetType("TestAssembly.Nested+Validator")!)));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.Request")!, TestAssembly.GetType("TestAssembly.Request")!));
    services.Add(ServiceDescriptor.Scoped(typeof(global::TestAssembly.IRequest<>).MakeGenericType(TestAssembly.GetType("TestAssembly.Response")!)!, a => a.GetRequiredService(TestAssembly.GetType("TestAssembly.Request")!)));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.RequestHandler")!, TestAssembly.GetType("TestAssembly.RequestHandler")!));
    services.Add(ServiceDescriptor.Scoped(typeof(global::TestAssembly.IRequestHandler<, >).MakeGenericType(TestAssembly.GetType("TestAssembly.Request")!, TestAssembly.GetType("TestAssembly.Response")!)!, a => a.GetRequiredService(TestAssembly.GetType("TestAssembly.RequestHandler")!)));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.Response")!, TestAssembly.GetType("TestAssembly.Response")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Service, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IServiceB>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.ServiceB")!, TestAssembly.GetType("TestAssembly.ServiceB")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => (global::TestAssembly.IService)a.GetRequiredService(TestAssembly.GetType("TestAssembly.ServiceB")!)));
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    ServiceDescriptor-TestAssembly-5d82bdce0d6ac4694978c8b9de77a823: {
      Kind: ServiceDescriptor,
      Location: {
        Kind: ServiceDescriptor,
        LineNumber: 307,
        ExpressionHash: Na/OfX2a2Fx0+IoPnlDWxQ==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.ServiceA, global::TestAssembly.Nested.ServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Nested.ServiceA>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Service, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IServiceB>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.ServiceB")!, TestAssembly.GetType("TestAssembly.ServiceB")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => (global::TestAssembly.IService)a.GetRequiredService(TestAssembly.GetType("TestAssembly.ServiceB")!)));
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    ServiceDescriptor-TestAssembly-5f203b52e70948f1a4c13bd2c5a43f98: {
      Kind: ServiceDescriptor,
      Location: {
        Kind: ServiceDescriptor,
        LineNumber: 319,
        ExpressionHash: GzSo1ZIJ3PB0c4cYw44F8g==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.ServiceA, global::TestAssembly.Nested.ServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Nested.ServiceA>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Service, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IServiceB>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.ServiceB")!, TestAssembly.GetType("TestAssembly.ServiceB")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => (global::TestAssembly.IService)a.GetRequiredService(TestAssembly.GetType("TestAssembly.ServiceB")!)));
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    ServiceDescriptor-TestAssembly-6abde1565fa82932385199db06ce8fe9: {
      Kind: ServiceDescriptor,
      Location: {
        Kind: ServiceDescriptor,
        LineNumber: 342,
        ExpressionHash: jCIje2cqWf6omSDVYQ2HlQ==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService, global::TestAssembly.Nested.ServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Scoped(typeof(global::TestAssembly.IService), TestAssembly.GetType("TestAssembly.ServiceB")!));
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    ServiceDescriptor-TestAssembly-7984f7a181d9ba4f1a74517e205ad450: {
      Kind: ServiceDescriptor,
      Location: {
        Kind: ServiceDescriptor,
        LineNumber: 337,
        ExpressionHash: Ibe4iuU0MFY/Rf8IGp5VWg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    services.Add(ServiceDescriptor.Scoped(typeof(global::TestAssembly.IValidator<>).MakeGenericType(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!)!, TestAssembly.GetType("TestAssembly.Nested+Validator")!));
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    ServiceDescriptor-TestAssembly-a934dd81e5761f7cc496fd8a59f3945d: {
      Kind: ServiceDescriptor,
      Location: {
        Kind: ServiceDescriptor,
        LineNumber: 268,
        ExpressionHash: A6yjy1/sDfCZYryJ841HEQ==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.Nested.ServiceA, global::TestAssembly.Nested.ServiceA>());
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Nested.ServiceA>()));
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.Service, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.IServiceB>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Singleton(TestAssembly.GetType("TestAssembly.ServiceB")!, TestAssembly.GetType("TestAssembly.ServiceB")!));
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.IService>(a => (global::TestAssembly.IService)a.GetRequiredService(TestAssembly.GetType("TestAssembly.ServiceB")!)));
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    ServiceDescriptor-TestAssembly-b6d2c2674caef9c4d08078276671f631: {
      Kind: ServiceDescriptor,
      Location: {
        Kind: ServiceDescriptor,
        LineNumber: 347,
        ExpressionHash: uKnnfpwHyRGKAgfPehO0Dg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.GenericService")!, TestAssembly.GetType("TestAssembly.GenericService")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Int32>>(a => (global::TestAssembly.IGenericService<global::System.Int32>)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.GenericServiceB, global::TestAssembly.GenericServiceB>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Decimal>>(a => a.GetRequiredService<global::TestAssembly.GenericServiceB>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.GenericServiceA, global::TestAssembly.Nested.GenericServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>>(a => a.GetRequiredService<global::TestAssembly.Nested.GenericServiceA>()));
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    ServiceDescriptor-TestAssembly-c101ed5bd2fda7bc96798e054954096d: {
      Kind: ServiceDescriptor,
      Location: {
        Kind: ServiceDescriptor,
        LineNumber: 296,
        ExpressionHash: kZPm/qtioIE2Q/XYleeTDg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.GenericService")!, TestAssembly.GetType("TestAssembly.GenericService")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Int32>>(a => (global::TestAssembly.IGenericService<global::System.Int32>)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>>(a => (global::TestAssembly.IGenericService<global::System.String>)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IOther>(a => (global::TestAssembly.IOther)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.GenericServiceB, global::TestAssembly.GenericServiceB>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Decimal>>(a => a.GetRequiredService<global::TestAssembly.GenericServiceB>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IOther>(a => a.GetRequiredService<global::TestAssembly.GenericServiceB>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.GenericServiceA, global::TestAssembly.Nested.GenericServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>>(a => a.GetRequiredService<global::TestAssembly.Nested.GenericServiceA>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IOther>(a => a.GetRequiredService<global::TestAssembly.Nested.GenericServiceA>()));
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    ServiceDescriptor-TestAssembly-c3eba450a7d940a43a934b97e7b0d431: {
      Kind: ServiceDescriptor,
      Location: {
        Kind: ServiceDescriptor,
        LineNumber: 353,
        ExpressionHash: e6jKlf2yQ6H5hQN8Bx6GZg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    services.Add(ServiceDescriptor.Scoped(typeof(global::TestAssembly.IGenericService<global::System.Int32>), TestAssembly.GetType("TestAssembly.GenericService")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Decimal>, global::TestAssembly.GenericServiceB>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>, global::TestAssembly.Nested.GenericServiceA>());
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    ServiceDescriptor-TestAssembly-ce2cbd5b76d8b5a943aa5863adaac290: {
      Kind: ServiceDescriptor,
      Location: {
        Kind: ServiceDescriptor,
        LineNumber: 302,
        ExpressionHash: i/Q9YfbrangthmO+cbE3ag==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    services.Add(ServiceDescriptor.Singleton(typeof(global::TestAssembly.IRequestHandler<, >).MakeGenericType(TestAssembly.GetType("TestAssembly.Request")!, TestAssembly.GetType("TestAssembly.Response")!)!, TestAssembly.GetType("TestAssembly.RequestHandler")!));
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    ServiceDescriptor-TestAssembly-cedd440a1a0d24951ee0c23fefea1515: {
      Kind: ServiceDescriptor,
      Location: {
        Kind: ServiceDescriptor,
        LineNumber: 331,
        ExpressionHash: wZN42eb6ksINrJp/aOMX9Q==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.GenericService")!, TestAssembly.GetType("TestAssembly.GenericService")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Int32>>(a => (global::TestAssembly.IGenericService<global::System.Int32>)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>>(a => (global::TestAssembly.IGenericService<global::System.String>)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.GenericServiceB, global::TestAssembly.GenericServiceB>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Decimal>>(a => a.GetRequiredService<global::TestAssembly.GenericServiceB>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.GenericServiceA, global::TestAssembly.Nested.GenericServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>>(a => a.GetRequiredService<global::TestAssembly.Nested.GenericServiceA>()));
},
      PrivateAssemblies: [
        TestAssembly
      ]
    },
    ServiceDescriptor-TestAssembly-e2df2b6528ab1f0c8ea39f820f0eb626: {
      Kind: ServiceDescriptor,
      Location: {
        Kind: ServiceDescriptor,
        LineNumber: 262,
        ExpressionHash: fhNv/1snT1EgMxIUt2qh7Q==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Service, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IServiceB>(a => a.GetRequiredService<global::TestAssembly.Service>()));
},
      PrivateAssemblies: null
    }
  },
  References: [
    <in-memory assembly>,
    Microsoft.Extensions.DependencyInjection.Abstractions.dll,
    mscorlib.dll,
    netstandard.dll,
    Rocket.Surgery.DependencyInjection.Extensions.dll,
    System.ComponentModel.dll,
    System.Core.dll,
    System.dll,
    System.Private.CoreLib.dll,
    System.Runtime.dll,
    TestAssembly.dll
  ],
  SkippedAssemblies: [
    Microsoft.Extensions.DependencyInjection.Abstractions,
    mscorlib,
    netstandard,
    System.ComponentModel,
    System.Core,
    System,
    System.Private.CoreLib,
    System.Runtime,
    TestAssembly
  ]
}