{
  FinalDiagnostics: [],
  GeneratedCache: {
    OtherProject: {
      InternalReflectionRequests: [
        {
          Assembly: {
            Location: {
              Kind: Reflection,
              LineNumber: 16,
              ExpressionHash: Dejw5/f3yFikQXVKD2M3pg==,
              FileName: Input0.cs,
              FilePath: Input0.cs
            },
            Assembly: {
              AllAssembly: true,
              IncludeSystem: false,
              Assembly: null,
              NotAssembly: [
                Rocket.Surgery.DependencyInjection.Extensions
              ],
              AssemblyDependencies: null
            }
          },
          Reflection: {
            Type: {
              Filter: All,
              NamespaceFilters: [
                {
                  Filter: NotIn,
                  Namespaces: [
                    JetBrains.Annotations,
                    Polyfills,
                    System
                  ]
                }
              ],
              NameFilters: [
                {
                  Include: false,
                  Names: [
                    Polyfill
                  ]
                }
              ],
              TypeKindFilters: null,
              TypeInfoFilters: [
                {
                  Include: false,
                  TypeInfos: [
                    Abstract
                  ]
                }
              ],
              WithAttributeFilters: null,
              WithAttributeStringFilters: null,
              WithAnyAttributeFilters: null,
              WithAnyAttributeStringFilters: null,
              AssignableToTypeFilters: [
                {
                  Include: false,
                  Assembly: Rocket.Surgery.DependencyInjection.Extensions,
                  Type: Rocket.Surgery.DependencyInjection.Compiled.ICompiledTypeProvider,
                  UnboundGenericType: false
                }
              ],
              AssignableToAnyTypeFilters: null
            }
          },
          Type: GetReflectionCollectionData
        }
      ],
      IsEmpty: false
    },
    Rocket.Surgery.DependencyInjection.Extensions: {
      InternalServiceDescriptorRequests: [
        {
          Assembly: {
            Location: {
              Kind: ServiceDescriptor,
              LineNumber: 21,
              ExpressionHash: 8JsIfWGtyxwbpwWfPrtcbQ==,
              FileName: CompiledTypeProviderServiceCollectionExtensions.cs,
              FilePath: {SolutionDirectory}src/DependencyInjection.Extensions/CompiledTypeProviderServiceCollectionExtensions.cs
            },
            Assembly: {
              AllAssembly: true,
              IncludeSystem: false,
              Assembly: null,
              NotAssembly: null,
              AssemblyDependencies: null
            }
          },
          Reflection: {
            Type: {
              Filter: All,
              NamespaceFilters: null,
              NameFilters: null,
              TypeKindFilters: [
                {
                  Include: true,
                  TypeKinds: [
                    Class
                  ]
                }
              ],
              TypeInfoFilters: [
                {
                  Include: false,
                  TypeInfos: [
                    Static,
                    Abstract
                  ]
                }
              ],
              WithAttributeFilters: null,
              WithAttributeStringFilters: null,
              WithAnyAttributeFilters: [
                {
                  Include: true,
                  Assembly: Rocket.Surgery.DependencyInjection.Extensions,
                  Attribute: Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute,
                  UnboundGenericType: false
                },
                {
                  Include: true,
                  Assembly: Rocket.Surgery.DependencyInjection.Extensions,
                  Attribute: Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute`2,
                  UnboundGenericType: true
                },
                {
                  Include: true,
                  Assembly: Rocket.Surgery.DependencyInjection.Extensions,
                  Attribute: Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute`3,
                  UnboundGenericType: true
                },
                {
                  Include: true,
                  Assembly: Rocket.Surgery.DependencyInjection.Extensions,
                  Attribute: Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute`4,
                  UnboundGenericType: true
                }
              ],
              WithAnyAttributeStringFilters: null,
              AssignableToTypeFilters: null,
              AssignableToAnyTypeFilters: null
            }
          },
          ServiceDescriptor: {
            ServiceDescriptor: {
              ServiceTypeDescriptors: [
                {
                  Identifier: "s"
                }
              ]
            }
          },
          Type: GetServiceDescriptorCollectionData
        }
      ],
      IsEmpty: false
    }
  },
  GeneratorDiagnostics: {
    Rocket.Surgery.DependencyInjection.Analyzers.CompiledServiceScanningGenerator: []
  },
  GlobalOptions: {
    build_property.IntermediateOutputPath: obj/net9.0,
    build_property.ProjectDir: {TempPath}/test
  },
  PartialsCached: {
    Reflection-Microsoft_Extensions_DependencyInjection_Abstractions-903962b38dc3dbb51432abbd5fa49a46: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 16,
        ExpressionHash: Dejw5/f3yFikQXVKD2M3pg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("FxResources.Microsoft.Extensions.DependencyInjection.Abstractions.SR")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ActivatorUtilitiesUpdateHandler")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorInfoEx")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorMatcher")!);
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+FactoryParameterContext")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructorAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.AsyncServiceScope));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.FromKeyedServicesAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.KeyedService));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.KeyedService+AnyKeyObj")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ObjectFactory<>));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollection));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ServiceCollection+ServiceCollectionDebugView")!);
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceKeyAttribute));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceLifetime));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderKeyedServiceExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions));
    items.Add(MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.Internal.ParameterDefaultValue")!);
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    Reflection-OtherProject-903962b38dc3dbb51432abbd5fa49a46: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 16,
        ExpressionHash: Dejw5/f3yFikQXVKD2M3pg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(OtherProject.GetType("Program")!);
},
      PrivateAssemblies: [
        OtherProject
      ]
    },
    Reflection-Rocket_Surgery_DependencyInjection_Extensions-903962b38dc3dbb51432abbd5fa49a46: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 16,
        ExpressionHash: Dejw5/f3yFikQXVKD2M3pg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.RegistrationLifetimeAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<, >));
},
      PrivateAssemblies: [
        Rocket.Surgery.DependencyInjection.Extensions
      ]
    },
    Reflection-TestAssembly-903962b38dc3dbb51432abbd5fa49a46: {
      Kind: Reflection,
      Location: {
        Kind: Reflection,
        LineNumber: 16,
        ExpressionHash: Dejw5/f3yFikQXVKD2M3pg==,
        FileName: Input0.cs,
        FilePath: Input0.cs
      },
      Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(typeof(global::TestAssembly.Service));
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
      PrivateAssemblies: [
        TestAssembly
      ]
    }
  },
  References: [
    <in-memory assembly>,
    Microsoft.Extensions.DependencyInjection.Abstractions.dll,
    mscorlib.dll,
    netstandard.dll,
    Rocket.Surgery.DependencyInjection.Extensions.dll,
    System.ComponentModel.dll,
    System.Core.dll,
    System.dll,
    System.Private.CoreLib.dll,
    System.Runtime.dll,
    TestAssembly.dll
  ],
  SkippedAssemblies: [
    Microsoft.Extensions.DependencyInjection.Abstractions,
    mscorlib,
    netstandard,
    System.ComponentModel,
    System.Core,
    System,
    System.Private.CoreLib,
    System.Runtime,
    TestAssembly
  ]
}