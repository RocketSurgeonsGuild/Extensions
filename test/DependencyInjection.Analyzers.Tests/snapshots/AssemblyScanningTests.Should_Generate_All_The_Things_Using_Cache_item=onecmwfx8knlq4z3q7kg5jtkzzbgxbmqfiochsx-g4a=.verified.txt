{
  FinalDiagnostics: [],
  GeneratedCache: {
    Rocket.Surgery.DependencyInjection.Extensions: {
      InternalServiceDescriptorRequests: [
        {
          Assembly: {
            Location: {
              Kind: ServiceDescriptor,
              LineNumber: 21,
              ExpressionHash: 8PKITxXbtylCwtC8RjJaLg==,
              FileName: CompiledTypeProviderServiceCollectionExtensions.cs,
              FilePath: {SolutionDirectory}src/DependencyInjection.Extensions/CompiledTypeProviderServiceCollectionExtensions.cs
            },
            Assembly: {
              AllAssembly: true,
              IncludeSystem: false,
              Assembly: null,
              NotAssembly: null,
              AssemblyDependencies: null
            }
          },
          Reflection: {
            Type: {
              Filter: All,
              NamespaceFilters: null,
              NameFilters: null,
              TypeKindFilters: [
                {
                  Include: true,
                  TypeKinds: [
                    Class
                  ]
                }
              ],
              TypeInfoFilters: [
                {
                  Include: false,
                  TypeInfos: [
                    Static,
                    Abstract
                  ]
                }
              ],
              WithAttributeFilters: null,
              WithAttributeStringFilters: null,
              WithAnyAttributeFilters: [
                {
                  Include: true,
                  Assembly: Rocket.Surgery.DependencyInjection.Extensions,
                  Attribute: Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute,
                  UnboundGenericType: false
                },
                {
                  Include: true,
                  Assembly: Rocket.Surgery.DependencyInjection.Extensions,
                  Attribute: Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute`2,
                  UnboundGenericType: true
                },
                {
                  Include: true,
                  Assembly: Rocket.Surgery.DependencyInjection.Extensions,
                  Attribute: Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute`3,
                  UnboundGenericType: true
                },
                {
                  Include: true,
                  Assembly: Rocket.Surgery.DependencyInjection.Extensions,
                  Attribute: Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute`4,
                  UnboundGenericType: true
                }
              ],
              WithAnyAttributeStringFilters: null,
              AssignableToTypeFilters: null,
              AssignableToAnyTypeFilters: null
            }
          },
          ServiceDescriptor: {
            ServiceDescriptor: {
              ServiceTypeDescriptors: [
                {
                  Identifier: "s"
                }
              ]
            }
          },
          Type: GetServiceDescriptorCollectionData
        }
      ],
      ExcludeFromResolution: false,
      CacheVersion: {Scrubbed},
      IsEmpty: false
    }
  },
  GeneratorDiagnostics: {
    Rocket.Surgery.DependencyInjection.Analyzers.CompiledTypeProviderGenerator: []
  },
  GlobalOptions: {
    build_property.ExcludeAssemblyFromCTP: Microsoft,
    build_property.IntermediateOutputPath: obj/net9.0,
    build_property.ProjectDir: {TempPath}
  },
  PartialsCached: {
    /xBc7a7kAsqq2hTj8+znXg==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 211,
            ExpressionHash: zZSsZdtVJis8QO5n4pQYbg==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
},
          PrivateAssemblies: [
            Rocket.Surgery.DependencyInjection.Extensions
          ],
          CacheVersion: {Scrubbed}
        },
        TestAssembly: {
          Location: {
            Kind: Reflection,
            LineNumber: 211,
            ExpressionHash: zZSsZdtVJis8QO5n4pQYbg==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(typeof(global::TestAssembly.Service));
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    154QUrDaFR7iPNWG/MLD2w==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 22,
            ExpressionHash: TmpOe7kqtaI4TN48hoMaWA==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
},
          CacheVersion: {Scrubbed}
        },
        TestAssembly: {
          Location: {
            Kind: Reflection,
            LineNumber: 22,
            ExpressionHash: TmpOe7kqtaI4TN48hoMaWA==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
},
          CacheVersion: {Scrubbed}
        }
      }
    },
    2zWXDP3s4X6EKCKJ+Nbr2A==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 252,
            ExpressionHash: G43gcXk/3DHqdCYy9nmEKg==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ExcludeFromCompiledTypeProviderAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.RegistrationLifetimeAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<, >));
},
          CacheVersion: {Scrubbed}
        },
        TestAssembly: {
          Location: {
            Kind: Reflection,
            LineNumber: 252,
            ExpressionHash: G43gcXk/3DHqdCYy9nmEKg==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(typeof(global::TestAssembly.Service));
},
          CacheVersion: {Scrubbed}
        }
      }
    },
    3QW98bNr0DxxltppxzwMWg==: {
      ResolvedSources: {
        TestAssembly: {
          Location: {
            Kind: ServiceDescriptor,
            LineNumber: 268,
            ExpressionHash: CSc+6hElAjxc8UqHDR2nGg==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.Nested.ServiceA, global::TestAssembly.Nested.ServiceA>());
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Nested.ServiceA>()));
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.Service, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.IServiceB>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Singleton(TestAssembly.GetType("TestAssembly.ServiceB")!, TestAssembly.GetType("TestAssembly.ServiceB")!));
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.IService>(a => (global::TestAssembly.IService)a.GetRequiredService(TestAssembly.GetType("TestAssembly.ServiceB")!)));
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    5VMAltSUf/g4GlZWhsqE/g==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 42,
            ExpressionHash: Xt+gXX8VI+/o1zAmcdZPUw==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ExcludeFromCompiledTypeProviderAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.RegistrationLifetimeAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<, >));
},
          PrivateAssemblies: [
            Rocket.Surgery.DependencyInjection.Extensions
          ],
          CacheVersion: {Scrubbed}
        },
        TestAssembly: {
          Location: {
            Kind: Reflection,
            LineNumber: 42,
            ExpressionHash: Xt+gXX8VI+/o1zAmcdZPUw==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(typeof(global::TestAssembly.Service));
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    5wJw9xTmziOAwH4x4RBqvg==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 122,
            ExpressionHash: aZistx/1kY6goq1k0APviA==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ExcludeFromCompiledTypeProviderAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.RegistrationLifetimeAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<, >));
},
          PrivateAssemblies: [
            Rocket.Surgery.DependencyInjection.Extensions
          ],
          CacheVersion: {Scrubbed}
        },
        TestAssembly: {
          Location: {
            Kind: Reflection,
            LineNumber: 122,
            ExpressionHash: aZistx/1kY6goq1k0APviA==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(typeof(global::TestAssembly.Service));
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    80NVAAk/PXSVHvOrqpbY4g==: {
      ResolvedSources: {
        TestAssembly: {
          Location: {
            Kind: ServiceDescriptor,
            LineNumber: 336,
            ExpressionHash: nGdrAptlVCEX9H6kHx0auw==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService, global::TestAssembly.Nested.ServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Scoped(typeof(global::TestAssembly.IService), TestAssembly.GetType("TestAssembly.ServiceB")!));
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    81xnw9LpvkwaL1qHx3DkzQ==: {
      ResolvedSources: {
        TestAssembly: {
          Location: {
            Kind: ServiceDescriptor,
            LineNumber: 347,
            ExpressionHash: jm/nkIDlrjpFn5pT15jCnw==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    services.Add(ServiceDescriptor.Scoped(typeof(global::TestAssembly.IGenericService<global::System.Int32>), TestAssembly.GetType("TestAssembly.GenericService")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Decimal>, global::TestAssembly.GenericServiceB>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>, global::TestAssembly.Nested.GenericServiceA>());
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    8rSSq0Bqye6hcR32l1PWlQ==: {
      ResolvedSources: {
        TestAssembly: {
          Location: {
            Kind: ServiceDescriptor,
            LineNumber: 331,
            ExpressionHash: HH9aVmBgFQ5bSAugUwbZsw==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    services.Add(ServiceDescriptor.Scoped(typeof(global::TestAssembly.IValidator<>).MakeGenericType(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!)!, TestAssembly.GetType("TestAssembly.Nested+Validator")!));
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    aaIZqJ/wtn5JPcA2e13jFw==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 102,
            ExpressionHash: ca8FK2k2biWcJo/tQ2D+0Q==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ExcludeFromCompiledTypeProviderAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.RegistrationLifetimeAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<, >));
},
          PrivateAssemblies: [
            Rocket.Surgery.DependencyInjection.Extensions
          ],
          CacheVersion: {Scrubbed}
        },
        TestAssembly: {
          Location: {
            Kind: Reflection,
            LineNumber: 102,
            ExpressionHash: ca8FK2k2biWcJo/tQ2D+0Q==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(typeof(global::TestAssembly.Service));
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    AuKVPC4eV0/Ddisx2WHq7A==: {
      ResolvedSources: {
        TestAssembly: {
          Location: {
            Kind: ServiceDescriptor,
            LineNumber: 274,
            ExpressionHash: fKfq36ZCDNfEou+qyyLEbw==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService, global::TestAssembly.Nested.ServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Scoped(typeof(global::TestAssembly.IService), TestAssembly.GetType("TestAssembly.ServiceB")!));
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    cbDulGe0z63U1oc9oqyFzQ==: {
      ResolvedSources: {
        TestAssembly: {
          Location: {
            Kind: ServiceDescriptor,
            LineNumber: 325,
            ExpressionHash: nNzkffztFbvyPeXlZPkOkQ==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.GenericService")!, TestAssembly.GetType("TestAssembly.GenericService")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Int32>>(a => (global::TestAssembly.IGenericService<global::System.Int32>)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>>(a => (global::TestAssembly.IGenericService<global::System.String>)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.GenericServiceB, global::TestAssembly.GenericServiceB>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Decimal>>(a => a.GetRequiredService<global::TestAssembly.GenericServiceB>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.GenericServiceA, global::TestAssembly.Nested.GenericServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>>(a => a.GetRequiredService<global::TestAssembly.Nested.GenericServiceA>()));
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    fBNdCZKHwjlbcfbkvfLNnQ==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 169,
            ExpressionHash: kccf/OaTnMCVdm/9GexI6A==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
},
          CacheVersion: {Scrubbed}
        },
        TestAssembly: {
          Location: {
            Kind: Reflection,
            LineNumber: 169,
            ExpressionHash: kccf/OaTnMCVdm/9GexI6A==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(typeof(global::TestAssembly.Service));
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    Fi6/iEaJOD/DTg1ymh5vgg==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 200,
            ExpressionHash: UQMB36l1GXcwnwk07khcPA==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
},
          PrivateAssemblies: [
            Rocket.Surgery.DependencyInjection.Extensions
          ],
          CacheVersion: {Scrubbed}
        },
        TestAssembly: {
          Location: {
            Kind: Reflection,
            LineNumber: 200,
            ExpressionHash: UQMB36l1GXcwnwk07khcPA==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(typeof(global::TestAssembly.Service));
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    hgNc+6kwdcx8UobVZDrD5A==: {
      ResolvedSources: {
        TestAssembly: {
          Location: {
            Kind: ServiceDescriptor,
            LineNumber: 302,
            ExpressionHash: a8a5Us+LBXHvnbZedXasXw==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    services.Add(ServiceDescriptor.Singleton(typeof(global::TestAssembly.IRequestHandler<, >).MakeGenericType(TestAssembly.GetType("TestAssembly.Request")!, TestAssembly.GetType("TestAssembly.Response")!)!, TestAssembly.GetType("TestAssembly.RequestHandler")!));
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    Hi7i1cDLwfhDhwR6+fGUIg==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 92,
            ExpressionHash: OEcoVmZS+d2TfT1y2s87jg==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
},
          CacheVersion: {Scrubbed}
        },
        TestAssembly: {
          Location: {
            Kind: Reflection,
            LineNumber: 92,
            ExpressionHash: OEcoVmZS+d2TfT1y2s87jg==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::TestAssembly.Nested));
},
          CacheVersion: {Scrubbed}
        }
      }
    },
    IopZ9jZAKaIVglPuoIWJ/g==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 232,
            ExpressionHash: STdPgg0BzqNex1xYlTuWWA==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
},
          CacheVersion: {Scrubbed}
        }
      }
    },
    J67g8Sm3esAF0orTBES5+w==: {
      ResolvedSources: {
        TestAssembly: {
          Location: {
            Kind: ServiceDescriptor,
            LineNumber: 341,
            ExpressionHash: iOVNY6dfLzra3vCDdW4AxA==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.GenericService")!, TestAssembly.GetType("TestAssembly.GenericService")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Int32>>(a => (global::TestAssembly.IGenericService<global::System.Int32>)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.GenericServiceB, global::TestAssembly.GenericServiceB>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Decimal>>(a => a.GetRequiredService<global::TestAssembly.GenericServiceB>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.GenericServiceA, global::TestAssembly.Nested.GenericServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>>(a => a.GetRequiredService<global::TestAssembly.Nested.GenericServiceA>()));
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    jFUwQmnenhfb2ApP6+RLmA==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 112,
            ExpressionHash: jbfZ/SBhNLTKU8V8KCyblQ==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<, >));
},
          PrivateAssemblies: [
            Rocket.Surgery.DependencyInjection.Extensions
          ],
          CacheVersion: {Scrubbed}
        },
        TestAssembly: {
          Location: {
            Kind: Reflection,
            LineNumber: 112,
            ExpressionHash: jbfZ/SBhNLTKU8V8KCyblQ==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IValidator<>));
},
          CacheVersion: {Scrubbed}
        }
      }
    },
    jV8TRJulchBjTqkvaD/3EA==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 158,
            ExpressionHash: CWFPPpqrLI3buzj44KDzTw==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
},
          PrivateAssemblies: [
            Rocket.Surgery.DependencyInjection.Extensions
          ],
          CacheVersion: {Scrubbed}
        },
        TestAssembly: {
          Location: {
            Kind: Reflection,
            LineNumber: 158,
            ExpressionHash: CWFPPpqrLI3buzj44KDzTw==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(typeof(global::TestAssembly.Service));
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    L/Y/4fNst7QBtgY/yUqadQ==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 132,
            ExpressionHash: 6eINCg7X1s1Fy3K8elffJw==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
},
          PrivateAssemblies: [
            Rocket.Surgery.DependencyInjection.Extensions
          ],
          CacheVersion: {Scrubbed}
        },
        TestAssembly: {
          Location: {
            Kind: Reflection,
            LineNumber: 132,
            ExpressionHash: 6eINCg7X1s1Fy3K8elffJw==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    LovUVVJwzOj48F2xN62RoA==: {
      ResolvedSources: {
        TestAssembly: {
          Location: {
            Kind: ServiceDescriptor,
            LineNumber: 279,
            ExpressionHash: RF0U3ve7NmkBVhOpOoW7bQ==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.Nested.ServiceA, global::TestAssembly.Nested.ServiceA>());
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Nested.ServiceA>()));
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.Service, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.IServiceB>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Singleton(TestAssembly.GetType("TestAssembly.ServiceB")!, TestAssembly.GetType("TestAssembly.ServiceB")!));
    services.Add(ServiceDescriptor.Singleton<global::TestAssembly.IService>(a => (global::TestAssembly.IService)a.GetRequiredService(TestAssembly.GetType("TestAssembly.ServiceB")!)));
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    m/ELDgWFwZzv+dsQDV1Oig==: {
      ResolvedSources: {
        TestAssembly: {
          Location: {
            Kind: ServiceDescriptor,
            LineNumber: 313,
            ExpressionHash: e8KAWIaBqxCKvrQ5PGf0qg==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.ServiceA, global::TestAssembly.Nested.ServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Nested.ServiceA>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Service, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IServiceB>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.ServiceB")!, TestAssembly.GetType("TestAssembly.ServiceB")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => (global::TestAssembly.IService)a.GetRequiredService(TestAssembly.GetType("TestAssembly.ServiceB")!)));
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    mlZFQkn3OkbT8MDHwNuhGg==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 242,
            ExpressionHash: zAB6003nIMDyeZHIzhkT8w==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
},
          CacheVersion: {Scrubbed}
        }
      }
    },
    OynznIZE05EJIMNhnpvQtQ==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 52,
            ExpressionHash: 61ZCBretH0dWUW7zHYRfQQ==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
},
          CacheVersion: {Scrubbed}
        },
        TestAssembly: {
          Location: {
            Kind: Reflection,
            LineNumber: 52,
            ExpressionHash: 61ZCBretH0dWUW7zHYRfQQ==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
},
          CacheVersion: {Scrubbed}
        }
      }
    },
    ps1xd1p6+UM1KKl4iSZdXw==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 222,
            ExpressionHash: 3jHicIrYcndhq8Cd5yrd0Q==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
},
          CacheVersion: {Scrubbed}
        }
      }
    },
    pX3KzueNfQtGWwjNUJBy6g==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 72,
            ExpressionHash: mF75dG+Dv3CzvhneQ0PZMQ==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
},
          CacheVersion: {Scrubbed}
        }
      }
    },
    Qs1NdcQoWM7VH1OSjMvWeQ==: {
      ResolvedSources: {
        TestAssembly: {
          Location: {
            Kind: ServiceDescriptor,
            LineNumber: 262,
            ExpressionHash: lk0ALym+V2W6xQDXO/AkYw==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Service, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IServiceB>(a => a.GetRequiredService<global::TestAssembly.Service>()));
},
          CacheVersion: {Scrubbed}
        }
      }
    },
    RZ+PeiQ1r0+3dM/P6mL/0w==: {
      ResolvedSources: {
        TestAssembly: {
          Location: {
            Kind: ServiceDescriptor,
            LineNumber: 307,
            ExpressionHash: xbYAbKX/QnnClXoKl6q/Aw==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Service, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IServiceB>(a => a.GetRequiredService<global::TestAssembly.Service>()));
},
          CacheVersion: {Scrubbed}
        }
      }
    },
    s0srrR4LjudSXa1/uWyb9A==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 82,
            ExpressionHash: qBIVSXgRbSfIUDtbJ2U3ow==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<, >));
},
          CacheVersion: {Scrubbed}
        }
      }
    },
    skFJ13MeCJeBK9F0SThvug==: {
      ResolvedSources: {
        TestAssembly: {
          Location: {
            Kind: ServiceDescriptor,
            LineNumber: 366,
            ExpressionHash: MeX+mF+ej5803TONO0SaMw==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.GenericService")!, TestAssembly.GetType("TestAssembly.GenericService")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Int32>>(a => (global::TestAssembly.IGenericService<global::System.Int32>)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>>(a => (global::TestAssembly.IGenericService<global::System.String>)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IOther>(a => (global::TestAssembly.IOther)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.GenericServiceB, global::TestAssembly.GenericServiceB>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Decimal>>(a => a.GetRequiredService<global::TestAssembly.GenericServiceB>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IOther>(a => a.GetRequiredService<global::TestAssembly.GenericServiceB>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.GenericServiceA, global::TestAssembly.Nested.GenericServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>>(a => a.GetRequiredService<global::TestAssembly.Nested.GenericServiceA>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IOther>(a => a.GetRequiredService<global::TestAssembly.Nested.GenericServiceA>()));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!, TestAssembly.GetType("TestAssembly.Nested+MyRecord")!));
    services.Add(ServiceDescriptor.Scoped(typeof(global::System.IEquatable<>).MakeGenericType(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!)!, a => a.GetRequiredService(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.ServiceA, global::TestAssembly.Nested.ServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Nested.ServiceA>()));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.Nested+Validator")!, TestAssembly.GetType("TestAssembly.Nested+Validator")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IValidator>(a => (global::TestAssembly.IValidator)a.GetRequiredService(TestAssembly.GetType("TestAssembly.Nested+Validator")!)));
    services.Add(ServiceDescriptor.Scoped(typeof(global::TestAssembly.IValidator<>).MakeGenericType(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!)!, a => a.GetRequiredService(TestAssembly.GetType("TestAssembly.Nested+Validator")!)));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.Request")!, TestAssembly.GetType("TestAssembly.Request")!));
    services.Add(ServiceDescriptor.Scoped(typeof(global::TestAssembly.IRequest<>).MakeGenericType(TestAssembly.GetType("TestAssembly.Response")!)!, a => a.GetRequiredService(TestAssembly.GetType("TestAssembly.Request")!)));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.RequestHandler")!, TestAssembly.GetType("TestAssembly.RequestHandler")!));
    services.Add(ServiceDescriptor.Scoped(typeof(global::TestAssembly.IRequestHandler<, >).MakeGenericType(TestAssembly.GetType("TestAssembly.Request")!, TestAssembly.GetType("TestAssembly.Response")!)!, a => a.GetRequiredService(TestAssembly.GetType("TestAssembly.RequestHandler")!)));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.Response")!, TestAssembly.GetType("TestAssembly.Response")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Service, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IServiceB>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.ServiceB")!, TestAssembly.GetType("TestAssembly.ServiceB")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => (global::TestAssembly.IService)a.GetRequiredService(TestAssembly.GetType("TestAssembly.ServiceB")!)));
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    t2BpCEHKRloOm0gtr0cQHw==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 32,
            ExpressionHash: Epy+1yb5HdlK1Hu9cBVEWQ==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
},
          CacheVersion: {Scrubbed}
        },
        TestAssembly: {
          Location: {
            Kind: Reflection,
            LineNumber: 32,
            ExpressionHash: Epy+1yb5HdlK1Hu9cBVEWQ==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
},
          CacheVersion: {Scrubbed}
        }
      }
    },
    u1zrM51P4aqyJOVnVlpl5g==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 147,
            ExpressionHash: riCLI8zEdrtpr1RFumwoCQ==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!);
    items.Add(RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!);
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
},
          PrivateAssemblies: [
            Rocket.Surgery.DependencyInjection.Extensions
          ],
          CacheVersion: {Scrubbed}
        },
        TestAssembly: {
          Location: {
            Kind: Reflection,
            LineNumber: 147,
            ExpressionHash: riCLI8zEdrtpr1RFumwoCQ==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(TestAssembly.GetType("TestAssembly.GenericService")!);
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+MyRecord")!);
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(TestAssembly.GetType("TestAssembly.Nested+Validator")!);
    items.Add(TestAssembly.GetType("TestAssembly.Request")!);
    items.Add(TestAssembly.GetType("TestAssembly.RequestHandler")!);
    items.Add(TestAssembly.GetType("TestAssembly.Response")!);
    items.Add(typeof(global::TestAssembly.Service));
    items.Add(TestAssembly.GetType("TestAssembly.ServiceB")!);
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    ur/UTwQjl23m+xxnyl1Yww==: {
      ResolvedSources: {
        Rocket.Surgery.DependencyInjection.Extensions: {
          Location: {
            Kind: Reflection,
            LineNumber: 62,
            ExpressionHash: ZZVauT3fwrJrb/rmRz/z5g==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions));
    items.Add(typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ExcludeFromCompiledTypeProviderAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IReflectionTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorAssemblySelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceDescriptorTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceLifetimeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.IServiceTypeSelector));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.ITypeFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScoped<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.IExecuteScopedOptional<, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.RegistrationLifetimeAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<>));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,, >));
    items.Add(typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<, >));
},
          CacheVersion: {Scrubbed}
        },
        TestAssembly: {
          Location: {
            Kind: Reflection,
            LineNumber: 62,
            ExpressionHash: ZZVauT3fwrJrb/rmRz/z5g==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    items.Add(typeof(global::TestAssembly.GenericServiceB));
    items.Add(typeof(global::TestAssembly.IGenericService<>));
    items.Add(typeof(global::TestAssembly.IOther));
    items.Add(typeof(global::TestAssembly.IRequest<>));
    items.Add(typeof(global::TestAssembly.IRequestHandler<, >));
    items.Add(typeof(global::TestAssembly.IService));
    items.Add(typeof(global::TestAssembly.IServiceB));
    items.Add(typeof(global::TestAssembly.IValidator));
    items.Add(typeof(global::TestAssembly.IValidator<>));
    items.Add(typeof(global::TestAssembly.Nested));
    items.Add(typeof(global::TestAssembly.Nested.GenericServiceA));
    items.Add(typeof(global::TestAssembly.Nested.ServiceA));
    items.Add(typeof(global::TestAssembly.Service));
},
          CacheVersion: {Scrubbed}
        }
      }
    },
    wAL4RRuiNJPFjxkTcudYRA==: {
      ResolvedSources: {
        TestAssembly: {
          Location: {
            Kind: ServiceDescriptor,
            LineNumber: 285,
            ExpressionHash: H/jKai1h1B6jnFlFcyi7Tg==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.ServiceA, global::TestAssembly.Nested.ServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Nested.ServiceA>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Service, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IServiceB>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.ServiceB")!, TestAssembly.GetType("TestAssembly.ServiceB")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IService>(a => (global::TestAssembly.IService)a.GetRequiredService(TestAssembly.GetType("TestAssembly.ServiceB")!)));
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    WBYDLO4i5Ece4Q2ZHsuMPw==: {
      ResolvedSources: {
        TestAssembly: {
          Location: {
            Kind: ServiceDescriptor,
            LineNumber: 296,
            ExpressionHash: GC4f7Eu/9wIch8wpSP2wyQ==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.GenericService")!, TestAssembly.GetType("TestAssembly.GenericService")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Int32>>(a => (global::TestAssembly.IGenericService<global::System.Int32>)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>>(a => (global::TestAssembly.IGenericService<global::System.String>)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IOther>(a => (global::TestAssembly.IOther)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.GenericServiceB, global::TestAssembly.GenericServiceB>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Decimal>>(a => a.GetRequiredService<global::TestAssembly.GenericServiceB>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IOther>(a => a.GetRequiredService<global::TestAssembly.GenericServiceB>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.GenericServiceA, global::TestAssembly.Nested.GenericServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>>(a => a.GetRequiredService<global::TestAssembly.Nested.GenericServiceA>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IOther>(a => a.GetRequiredService<global::TestAssembly.Nested.GenericServiceA>()));
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    xQkf4u4B1KuD3VDOpe3gmg==: {
      ResolvedSources: {
        TestAssembly: {
          Location: {
            Kind: ServiceDescriptor,
            LineNumber: 291,
            ExpressionHash: Cig2XJLApDe8z9wMh/IDUA==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.GenericService")!, TestAssembly.GetType("TestAssembly.GenericService")!));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Int32>>(a => (global::TestAssembly.IGenericService<global::System.Int32>)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>>(a => (global::TestAssembly.IGenericService<global::System.String>)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IOther>(a => (global::TestAssembly.IOther)a.GetRequiredService(TestAssembly.GetType("TestAssembly.GenericService")!)));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.GenericServiceB, global::TestAssembly.GenericServiceB>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.Decimal>>(a => a.GetRequiredService<global::TestAssembly.GenericServiceB>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IOther>(a => a.GetRequiredService<global::TestAssembly.GenericServiceB>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.GenericServiceA, global::TestAssembly.Nested.GenericServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IGenericService<global::System.String>>(a => a.GetRequiredService<global::TestAssembly.Nested.GenericServiceA>()));
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IOther>(a => a.GetRequiredService<global::TestAssembly.Nested.GenericServiceA>()));
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    },
    xT+GrQgmRqnWAog8sLIN/Q==: {
      ResolvedSources: {
        TestAssembly: {
          Location: {
            Kind: ServiceDescriptor,
            LineNumber: 319,
            ExpressionHash: QR7ilMUHdBOqlpGLxKKLDQ==,
            FileName: Input0.cs,
            FilePath: Input0.cs
          },
          Expression:
{
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Nested.ServiceA, global::TestAssembly.Nested.ServiceA>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.Service, global::TestAssembly.Service>());
    services.Add(ServiceDescriptor.Scoped<global::TestAssembly.IServiceB>(a => a.GetRequiredService<global::TestAssembly.Service>()));
    services.Add(ServiceDescriptor.Scoped(TestAssembly.GetType("TestAssembly.ServiceB")!, TestAssembly.GetType("TestAssembly.ServiceB")!));
},
          PrivateAssemblies: [
            TestAssembly
          ],
          CacheVersion: {Scrubbed}
        }
      }
    }
  },
  References: [
    Microsoft.Extensions.DependencyInjection.Abstractions.dll,
    mscorlib.dll,
    netstandard.dll,
    Rocket.Surgery.DependencyInjection.Extensions.dll,
    System.ComponentModel.dll,
    System.Core.dll,
    System.dll,
    System.Private.CoreLib.dll,
    System.Runtime.dll,
    TestAssembly.dll
  ],
  SkippedAssemblies: [
    mscorlib,
    netstandard,
    System,
    System.ComponentModel,
    System.Core,
    System.Private.CoreLib,
    System.Runtime,
    TestAssembly
  ]
}