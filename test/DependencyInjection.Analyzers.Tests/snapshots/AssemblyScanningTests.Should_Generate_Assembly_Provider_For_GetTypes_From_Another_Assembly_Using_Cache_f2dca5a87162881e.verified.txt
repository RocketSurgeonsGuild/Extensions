{
  FinalDiagnostics: [],
  GeneratedCache: {
    OtherProject: {
      InternalReflectionRequests: [
        {
          Assembly: {
            Location: {
              LineNumber: 14,
              ExpressionHash: CzvvM9SvABHOhmj5c5Ll9w==,
              FileName: Input0.cs,
              FilePath: Input0.cs
            },
            Assembly: {
              AllAssembly: true,
              IncludeSystem: false,
              Assembly: null,
              NotAssembly: null,
              AssemblyDependencies: null
            }
          },
          Reflection: {
            Type: {
              Filter: All,
              NamespaceFilters: [
                {
                  Filter: NotIn,
                  Namespaces: [
                    JetBrains.Annotations,
                    Polyfills,
                    System
                  ]
                }
              ],
              NameFilters: [
                {
                  Include: false,
                  Names: [
                    Polyfill
                  ]
                }
              ],
              TypeKindFilters: [
                {
                  Include: false,
                  TypeKinds: [
                    Delegate
                  ]
                },
                {
                  Include: false,
                  TypeKinds: [
                    Interface
                  ]
                }
              ],
              TypeInfoFilters: null,
              WithAttributeFilters: null,
              WithAttributeStringFilters: null,
              WithAnyAttributeFilters: null,
              WithAnyAttributeStringFilters: null,
              AssignableToTypeFilters: [
                {
                  Include: false,
                  Assembly: Rocket.Surgery.DependencyInjection.Extensions,
                  Type: Rocket.Surgery.DependencyInjection.Compiled.ICompiledTypeProvider,
                  UnboundGenericType: false
                }
              ],
              AssignableToAnyTypeFilters: null
            }
          },
          Type: GetReflectionCollectionData
        }
      ],
      IsEmpty: false
    },
    Rocket.Surgery.DependencyInjection.Extensions: {
      InternalServiceDescriptorRequests: [
        {
          Assembly: {
            Location: {
              LineNumber: 21,
              ExpressionHash: 8JsIfWGtyxwbpwWfPrtcbQ==,
              FileName: CompiledTypeProviderServiceCollectionExtensions.cs,
              FilePath: {SolutionDirectory}src/DependencyInjection.Extensions/CompiledTypeProviderServiceCollectionExtensions.cs
            },
            Assembly: {
              AllAssembly: true,
              IncludeSystem: false,
              Assembly: null,
              NotAssembly: null,
              AssemblyDependencies: null
            }
          },
          Reflection: {
            Type: {
              Filter: All,
              NamespaceFilters: null,
              NameFilters: null,
              TypeKindFilters: [
                {
                  Include: true,
                  TypeKinds: [
                    Class
                  ]
                }
              ],
              TypeInfoFilters: [
                {
                  Include: false,
                  TypeInfos: [
                    Static,
                    Abstract
                  ]
                }
              ],
              WithAttributeFilters: null,
              WithAttributeStringFilters: null,
              WithAnyAttributeFilters: [
                {
                  Include: true,
                  Assembly: Rocket.Surgery.DependencyInjection.Extensions,
                  Attribute: Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute,
                  UnboundGenericType: false
                },
                {
                  Include: true,
                  Assembly: Rocket.Surgery.DependencyInjection.Extensions,
                  Attribute: Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute`2,
                  UnboundGenericType: true
                },
                {
                  Include: true,
                  Assembly: Rocket.Surgery.DependencyInjection.Extensions,
                  Attribute: Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute`3,
                  UnboundGenericType: true
                },
                {
                  Include: true,
                  Assembly: Rocket.Surgery.DependencyInjection.Extensions,
                  Attribute: Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute`4,
                  UnboundGenericType: true
                }
              ],
              WithAnyAttributeStringFilters: null,
              AssignableToTypeFilters: null,
              AssignableToAnyTypeFilters: null
            }
          },
          ServiceDescriptor: {
            ServiceDescriptor: {
              ServiceTypeDescriptors: [
                {
                  Identifier: "s"
                }
              ]
            }
          },
          Type: GetServiceDescriptorCollectionData
        }
      ],
      IsEmpty: false
    }
  },
  GeneratorDiagnostics: {
    Rocket.Surgery.DependencyInjection.Analyzers.CompiledServiceScanningGenerator: []
  },
  GlobalOptions: {
    build_property.IntermediateOutputPath: obj/net9.0,
    build_property.ProjectDir: {TempDirectory}/rhadiaeqe4pemhrsxjg6ztxuza8dtof5wxq7ib6kp8/test
  },
  PartialsCached: {
    reflection-2ef5b612d24518b3f7bc8729a3bc0300: {
      Expression:
{
    yield return typeof(global::Program);
}
    },
    reflection-38c29bdfac98ce8804acfe22506878cd: {
      Expression:
{
    yield return MicrosoftExtensionsDependencyInjectionAbstractions.GetType("FxResources.Microsoft.Extensions.DependencyInjection.Abstractions.SR")!;
    yield return typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilities);
    yield return MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ActivatorUtilitiesUpdateHandler")!;
    yield return MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorInfoEx")!;
    yield return MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+ConstructorMatcher")!;
    yield return MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ActivatorUtilities+FactoryParameterContext")!;
    yield return typeof(global::Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructorAttribute);
    yield return typeof(global::Microsoft.Extensions.DependencyInjection.AsyncServiceScope);
    yield return typeof(global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions);
    yield return typeof(global::Microsoft.Extensions.DependencyInjection.FromKeyedServicesAttribute);
    yield return typeof(global::Microsoft.Extensions.DependencyInjection.KeyedService);
    yield return MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.KeyedService+AnyKeyObj")!;
    yield return typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollection);
    yield return MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.DependencyInjection.ServiceCollection+ServiceCollectionDebugView")!;
    yield return typeof(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions);
    yield return typeof(global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor);
    yield return typeof(global::Microsoft.Extensions.DependencyInjection.ServiceKeyAttribute);
    yield return typeof(global::Microsoft.Extensions.DependencyInjection.ServiceLifetime);
    yield return typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderKeyedServiceExtensions);
    yield return typeof(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions);
    yield return MicrosoftExtensionsDependencyInjectionAbstractions.GetType("Microsoft.Extensions.Internal.ParameterDefaultValue")!;
},
      PrivateAssemblies: [
        Microsoft.Extensions.DependencyInjection.Abstractions
      ]
    },
    reflection-f8286df541712f11fc17a6cd53b71e38: {
      Expression:
{
    yield return typeof(global::Microsoft.Extensions.DependencyInjection.CompiledTypeProviderServiceCollectionExtensions);
    yield return typeof(global::Microsoft.Extensions.DependencyInjection.ScopedServiceDependencyInjectionExtensions);
    yield return typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderAttribute);
    yield return typeof(global::Rocket.Surgery.DependencyInjection.Compiled.CompiledTypeProviderExtensions);
    yield return typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeInfoFilter);
    yield return typeof(global::Rocket.Surgery.DependencyInjection.Compiled.TypeKindFilter);
    yield return RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`1")!;
    yield return RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`6")!;
    yield return RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`5")!;
    yield return RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`4")!;
    yield return RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`3")!;
    yield return RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScoped`2")!;
    yield return RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`1")!;
    yield return RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`6")!;
    yield return RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`5")!;
    yield return RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`4")!;
    yield return RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`3")!;
    yield return RocketSurgeryDependencyInjectionExtensions.GetType("Rocket.Surgery.DependencyInjection.ExecuteScopedOptional`2")!;
    yield return typeof(global::Rocket.Surgery.DependencyInjection.RegistrationLifetimeAttribute);
    yield return typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceExtensions);
    yield return typeof(global::Rocket.Surgery.DependencyInjection.ScopedServiceOptionalExtensions);
    yield return typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute);
    yield return typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<>);
    yield return typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,,, >);
    yield return typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<,, >);
    yield return typeof(global::Rocket.Surgery.DependencyInjection.ServiceRegistrationAttribute<, >);
},
      PrivateAssemblies: [
        Rocket.Surgery.DependencyInjection.Extensions
      ]
    }
  },
  References: [
    <in-memory assembly>,
    Microsoft.Extensions.DependencyInjection.Abstractions.dll,
    mscorlib.dll,
    netstandard.dll,
    Rocket.Surgery.DependencyInjection.Extensions.dll,
    System.ComponentModel.dll,
    System.Core.dll,
    System.dll,
    System.Private.CoreLib.dll,
    System.Runtime.dll
  ],
  SkippedAssemblies: [
    Microsoft.Extensions.DependencyInjection.Abstractions,
    mscorlib,
    netstandard,
    System.ComponentModel,
    System.Core,
    System,
    System.Private.CoreLib,
    System.Runtime
  ]
}