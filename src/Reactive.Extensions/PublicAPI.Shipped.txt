#nullable enable
static System.Reactive.Linq.ObservableExtensions.ConcatMap<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TCollection>!>! collectionSelector, System.Func<TSource, int, TCollection, int, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.ConcatMap<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.IObservable<TCollection>!>! collectionSelector, System.Func<TSource, int, TCollection, int, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.ConcatMap<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>!>! collectionSelector, System.Func<TSource, TCollection, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.ConcatMap<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.IObservable<TCollection>!>! collectionSelector, System.Func<TSource, TCollection, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.ConcatMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.ConcatMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.IObservable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.ConcatMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.ConcatMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.Tasks.Task<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.ConcatMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.ConcatMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.IObservable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.ConcatMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.ConcatMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.Tasks.Task<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.ConcatMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, int, TTaskResult, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.ConcatMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, int, TTaskResult, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.ConcatMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, TTaskResult, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.ConcatMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, TTaskResult, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.Debounce<T>(this System.IObservable<T>! observable, System.IObservable<System.Reactive.Unit>! notifier, bool leading = true, bool trailing = false, System.Reactive.Concurrency.IScheduler? scheduler = null) -> System.IObservable<T>!
static System.Reactive.Linq.ObservableExtensions.Debounce<T>(this System.IObservable<T>! observable, System.TimeSpan dueTime, bool leading = false, bool trailing = true, System.Reactive.Concurrency.IScheduler? scheduler = null) -> System.IObservable<T>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TCollection>!>! collectionSelector, System.Func<TSource, int, TCollection, int, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.IObservable<TCollection>!>! collectionSelector, System.Func<TSource, int, TCollection, int, TResult>! resultSelector, int maxConcurrent) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.IObservable<TCollection>!>! collectionSelector, System.Func<TSource, int, TCollection, int, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>!>! collectionSelector, System.Func<TSource, TCollection, TResult>! resultSelector, int maxConcurrent) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>!>! collectionSelector, System.Func<TSource, TCollection, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.IObservable<TCollection>!>! collectionSelector, System.Func<TSource, TCollection, TResult>! resultSelector, int maxConcurrent) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.IObservable<TCollection>!>! collectionSelector, System.Func<TSource, TCollection, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TResult>!>! selector, int maxConcurrent) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.IObservable<TResult>!>! selector, int maxConcurrent) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.IObservable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! selector, int maxConcurrent) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.Tasks.Task<TResult>!>! selector, int maxConcurrent) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.Tasks.Task<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>!>! selector, int maxConcurrent) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.IObservable<TResult>!>! selector, int maxConcurrent) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.IObservable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! selector, int maxConcurrent) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.Tasks.Task<TResult>!>! selector, int maxConcurrent) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.Tasks.Task<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, int, TTaskResult, TResult>! resultSelector, int maxConcurrent) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, int, TTaskResult, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, int, TTaskResult, TResult>! resultSelector, int maxConcurrent) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, int, TTaskResult, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, TTaskResult, TResult>! resultSelector, int maxConcurrent) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, TTaskResult, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, TTaskResult, TResult>! resultSelector, int maxConcurrent) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.MergeMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, TTaskResult, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.RealThrottle<T>(this System.IObservable<T>! observable, System.IObservable<System.Reactive.Unit>! notifier, bool leading = true, bool trailing = false, System.Reactive.Concurrency.IScheduler? scheduler = null) -> System.IObservable<T>!
static System.Reactive.Linq.ObservableExtensions.RealThrottle<T>(this System.IObservable<T>! observable, System.TimeSpan dueTime, bool leading = true, bool trailing = false, System.Reactive.Concurrency.IScheduler? scheduler = null) -> System.IObservable<T>!
static System.Reactive.Linq.ObservableExtensions.Reduce<TSource, TAccumulate, TResult>(this System.IObservable<TSource>! source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate>! accumulator, System.Func<TAccumulate, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.Reduce<TSource, TAccumulate>(this System.IObservable<TSource>! source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate>! accumulator) -> System.IObservable<TAccumulate>!
static System.Reactive.Linq.ObservableExtensions.Reduce<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, TSource, TSource>! accumulator) -> System.IObservable<TSource>!
static System.Reactive.Linq.ObservableExtensions.SwitchMap<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TCollection>!>! collectionSelector, System.Func<TSource, int, TCollection, int, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.SwitchMap<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.IObservable<TCollection>!>! collectionSelector, System.Func<TSource, int, TCollection, int, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.SwitchMap<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>!>! collectionSelector, System.Func<TSource, TCollection, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.SwitchMap<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.IObservable<TCollection>!>! collectionSelector, System.Func<TSource, TCollection, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.SwitchMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.SwitchMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.IObservable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.SwitchMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.SwitchMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.Tasks.Task<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.SwitchMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.SwitchMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.IObservable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.SwitchMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.SwitchMap<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.Tasks.Task<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.SwitchMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, int, TTaskResult, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.SwitchMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, int, TTaskResult, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.SwitchMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, TTaskResult, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.SwitchMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, TTaskResult, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableExtensions.ToSignal<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Linq.ObservableExtensions.WhereNotNull<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<TSource>!
System.Reactive.Linq.ObservableExtensions
