#nullable enable
override Rocket.Surgery.Unions.UnionConverter.CanConvert(System.Type! objectType) -> bool
override Rocket.Surgery.Unions.UnionConverter.CanRead.get -> bool
override Rocket.Surgery.Unions.UnionConverter.CanWrite.get -> bool
override Rocket.Surgery.Unions.UnionConverter.ReadJson(Newtonsoft.Json.JsonReader! reader, System.Type! objectType, object? existingValue, Newtonsoft.Json.JsonSerializer! serializer) -> object!
override Rocket.Surgery.Unions.UnionConverter.WriteJson(Newtonsoft.Json.JsonWriter! writer, object? value, Newtonsoft.Json.JsonSerializer! serializer) -> void
Rocket.Surgery.Unions.UnionAttribute
Rocket.Surgery.Unions.UnionAttribute.UnionAttribute(object! value) -> void
Rocket.Surgery.Unions.UnionAttribute.Value.get -> object!
Rocket.Surgery.Unions.UnionConverter
Rocket.Surgery.Unions.UnionConverter.UnionConverter() -> void
Rocket.Surgery.Unions.UnionHelper
Rocket.Surgery.Unions.UnionKeyAttribute
Rocket.Surgery.Unions.UnionKeyAttribute.Key.get -> string!
Rocket.Surgery.Unions.UnionKeyAttribute.UnionKeyAttribute(string! key) -> void
static Rocket.Surgery.Unions.UnionHelper.GetAll(System.Collections.Generic.IEnumerable<System.Reflection.Assembly!>! assemblies) -> System.Collections.Generic.IEnumerable<(System.Reflection.TypeInfo! enumType, System.Reflection.TypeInfo! rootType, bool allImplemented)>!
static Rocket.Surgery.Unions.UnionHelper.GetAll(System.Reflection.Assembly! assembly, params System.Reflection.Assembly![]! rest) -> System.Collections.Generic.IEnumerable<(System.Reflection.TypeInfo! enumType, System.Reflection.TypeInfo! rootType, bool allImplemented)>!
static Rocket.Surgery.Unions.UnionHelper.GetRootType(System.Reflection.TypeInfo! typeInfo) -> System.Reflection.TypeInfo?
static Rocket.Surgery.Unions.UnionHelper.GetRootType(System.Type! type) -> System.Reflection.TypeInfo?
static Rocket.Surgery.Unions.UnionHelper.GetUnion(System.Reflection.TypeInfo! typeInfo) -> System.Collections.Generic.IReadOnlyDictionary<object!, System.Type!>!
static Rocket.Surgery.Unions.UnionHelper.GetUnion(System.Type! type) -> System.Collections.Generic.IReadOnlyDictionary<object!, System.Type!>!
static Rocket.Surgery.Unions.UnionHelper.GetUnionEnumType(System.Reflection.TypeInfo! type, string! propertyName) -> System.Type!
static Rocket.Surgery.Unions.UnionHelper.GetUnionEnumType(System.Reflection.TypeInfo! type) -> System.Type!
static Rocket.Surgery.Unions.UnionHelper.GetUnionEnumType(System.Type! type, string! propertyName) -> System.Type!
static Rocket.Surgery.Unions.UnionHelper.GetUnionEnumType(System.Type! type) -> System.Type!
static Rocket.Surgery.Unions.UnionHelper.GetUnionKey(System.Reflection.TypeInfo! type) -> string!
