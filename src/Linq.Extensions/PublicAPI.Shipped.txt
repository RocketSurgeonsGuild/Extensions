#nullable enable
static System.Linq.AsyncLinqExtensions.Filter<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static System.Linq.AsyncLinqExtensions.Filter<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, int, bool>! predicate) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static System.Linq.AsyncLinqExtensions.Map<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, int, TResult>! selector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static System.Linq.AsyncLinqExtensions.Map<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TResult>! selector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static System.Linq.AsyncLinqExtensions.MergeMap<TSource, TCollection, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, int, System.Collections.Generic.IAsyncEnumerable<TCollection>!>! collectionSelector, System.Func<TSource, TCollection, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static System.Linq.AsyncLinqExtensions.MergeMap<TSource, TCollection, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Collections.Generic.IAsyncEnumerable<TCollection>!>! collectionSelector, System.Func<TSource, TCollection, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static System.Linq.AsyncLinqExtensions.MergeMap<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, int, System.Collections.Generic.IAsyncEnumerable<TResult>!>! selector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static System.Linq.AsyncLinqExtensions.MergeMap<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Collections.Generic.IAsyncEnumerable<TResult>!>! selector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static System.Linq.AsyncLinqExtensions.ReduceAsync<TSource, TAccumulate, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate>! accumulator, System.Func<TAccumulate, TResult>! resultSelector, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<TResult>
static System.Linq.AsyncLinqExtensions.ReduceAsync<TSource, TAccumulate, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate>! accumulator, System.Func<TAccumulate, TResult>! resultSelector) -> System.Threading.Tasks.ValueTask<TResult>
static System.Linq.AsyncLinqExtensions.ReduceAsync<TSource, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate>! accumulator, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<TAccumulate>
static System.Linq.AsyncLinqExtensions.ReduceAsync<TSource, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate>! accumulator) -> System.Threading.Tasks.ValueTask<TAccumulate>
static System.Linq.AsyncLinqExtensions.ReduceAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TSource, TSource>! accumulator, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<TSource>
static System.Linq.AsyncLinqExtensions.ReduceAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TSource, TSource>! accumulator) -> System.Threading.Tasks.ValueTask<TSource>
static System.Linq.LinqExtensions.Filter<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.Collections.Generic.IEnumerable<TSource>!
static System.Linq.LinqExtensions.Filter<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, int, bool>! predicate) -> System.Collections.Generic.IEnumerable<TSource>!
static System.Linq.LinqExtensions.Map<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, int, TResult>! selector) -> System.Collections.Generic.IEnumerable<TResult>!
static System.Linq.LinqExtensions.Map<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TResult>! selector) -> System.Collections.Generic.IEnumerable<TResult>!
static System.Linq.LinqExtensions.MergeMap<TSource, TCollection, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TCollection>!>! collectionSelector, System.Func<TSource, TCollection, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static System.Linq.LinqExtensions.MergeMap<TSource, TCollection, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>!>! collectionSelector, System.Func<TSource, TCollection, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static System.Linq.LinqExtensions.MergeMap<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TResult>!>! selector) -> System.Collections.Generic.IEnumerable<TResult>!
static System.Linq.LinqExtensions.MergeMap<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>!>! selector) -> System.Collections.Generic.IEnumerable<TResult>!
static System.Linq.LinqExtensions.Reduce<TSource, TAccumulate, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate>! accumulator, System.Func<TAccumulate, TResult>! resultSelector) -> TResult
static System.Linq.LinqExtensions.Reduce<TSource, TAccumulate>(this System.Collections.Generic.IEnumerable<TSource>! source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate>! accumulator) -> TAccumulate
static System.Linq.LinqExtensions.Reduce<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TSource, TSource>! accumulator) -> TSource
System.Linq.AsyncLinqExtensions
System.Linq.LinqExtensions
